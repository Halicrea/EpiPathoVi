)
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
#| label: plot-power
#| eval: false
par(mfrow = c(1,2));
cex1 = 0.8;
plot(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence"),cex.lab=0.8
)
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
#| label: plot-power
#| eval: false
par(mfrow = c(1,2));
cex1 = 0.8;
plot(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence"),cex.lab=0.7,cex.axis=0.7
)
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
#| label: plot-power
#| eval: false
par(mfrow = c(1,2));
cex1 = 0.8;
plot(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence"),
cex.lab=0.7,cex.axis=0.7
)
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
cex.lab=0.7,cex.axis=0.7,
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
View(Module_Membership.df)
Module_Membership.df <- geneModuleMembership #%>%
View(Module_Membership.df)
Module_Membership.df <- geneModuleMembership %>%
select(contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
mutate(., geneTraitCor = geneTraitCor$phenotype) %>%
mutate(., colors = as.character(module))
View(Module_Membership.df)
Module_Membership.df <- geneModuleMembership #%>%
View(Module_Membership.df)
module_df
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) #%>%
View(Module_Membership.df)
View(Module_Membership.df)
table(module_df$colors)
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
filter(., evm %in% module_df$colors==module)
module_df$colors==module
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') #%>%
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
filter(., evm %in% filter(module_df,colors==module)$evm)
module_df$gene_id
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
filter(., evm %in% filter(module_df,colors==module)$gene_id)
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
filter(., evm %in% filter(module_df,colors==module)$gene_id) %>%
mutate(., geneTraitCor = geneTraitCor$phenotype) %>%
mutate(., colors = as.character(module))
geneTraitCor$phenotype
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
mutate(., geneTraitCor = geneTraitCor$phenotype) %>%
#mutate(., colors = as.character(module)) %>%
filter(., evm %in% filter(module_df,colors==module)$gene_id) %>%
#head(Module_Membership.df)
cor.info <- cor.test(Module_Membership.df$ME_module,Module_Membership.df$geneTraitCor)
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
mutate(., geneTraitCor = geneTraitCor$phenotype) %>%
#mutate(., colors = as.character(module)) %>%
filter(., evm %in% filter(module_df,colors==module)$gene_id)
View(Module_Membership.df)
cor.info <- cor.test(Module_Membership.df$ME_module,Module_Membership.df$geneTraitCor)
cor.exp <- paste0("r=",round(cor.info$estimate,3),'; P<0.001')
# Plot
ggplot(Module_Membership.df) + aes(x=abs(ME_module), y=abs(geneTraitCor), fill=colors) +
geom_point(cex=1.2, pch=21, fill=module,alpha=0.5,stroke=0.2) +
stat_smooth(method = 'lm') +
labs(x=paste0("Module Membership in ",module," module"),
y="Gene significance for pearl quality phenotype") +
scale_x_continuous(breaks = seq(0,1,0.1)) +
scale_y_continuous(breaks =seq(0,1,0.1)) +
theme_classic() +
theme(legend.position = 'none',
axis.title = element_text(color='black', size=13),
axis.text = element_text(color='black', size=11)) +
geom_text(x=0.5,y=max(abs(Module_Membership.df$geneTraitCor)),
label= cor.exp, col='black', cex=4)
View(Module_Membership.df)
# Plot
ggplot(Module_Membership.df) + aes(x=abs(ME_module), y=abs(geneTraitCor)) +
geom_point(cex=1.2, pch=21, fill=module,alpha=0.5,stroke=0.2) +
stat_smooth(method = 'lm') +
labs(x=paste0("Module Membership in ",module," module"),
y="Gene significance for pearl quality phenotype") +
scale_x_continuous(breaks = seq(0,1,0.1)) +
scale_y_continuous(breaks =seq(0,1,0.1)) +
theme_classic() +
theme(legend.position = 'none',
axis.title = element_text(color='black', size=13),
axis.text = element_text(color='black', size=11)) +
geom_text(x=0.5,y=max(abs(Module_Membership.df$geneTraitCor)),
label= cor.exp, col='black', cex=4)
# Plot
ggplot(Module_Membership.df) + aes(x=abs(ME_module), y=abs(geneTraitCor)) +
geom_point(cex=1.6, pch=21, fill=module,alpha=0.5,stroke=0.2) +
stat_smooth(method = 'lm') +
labs(x=paste0("Module Membership in ",module," module"),
y="Gene significance for pearl quality phenotype") +
scale_x_continuous(breaks = seq(0,1,0.1)) +
scale_y_continuous(breaks =seq(0,1,0.1)) +
theme_classic() +
theme(legend.position = 'none',
axis.title = element_text(color='black', size=13),
axis.text = element_text(color='black', size=11)) +
geom_text(x=0.5,y=max(abs(Module_Membership.df$geneTraitCor)),
label= cor.exp, col='black', cex=4)
# Plot
ggplot(Module_Membership.df) + aes(x=abs(ME_module), y=abs(geneTraitCor)) +
geom_point(cex=1.6, pch=21, fill=module,alpha=0.8,stroke=0.2) +
stat_smooth(method = 'lm') +
labs(x=paste0("Module Membership in ",module," module"),
y="Gene significance for pearl quality phenotype") +
scale_x_continuous(breaks = seq(0,1,0.1)) +
scale_y_continuous(breaks =seq(0,1,0.1)) +
theme_classic() +
theme(legend.position = 'none',
axis.title = element_text(color='black', size=13),
axis.text = element_text(color='black', size=11)) +
geom_text(x=0.5,y=max(abs(Module_Membership.df$geneTraitCor)),
label= cor.exp, col='black', cex=4)
#| label: plot-power
#| eval: true
par(mfrow = c(1,2));
cex1 = 0.9;
plot(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)", ylims=c(0,1),
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence")
)
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
#| label: plot-power
#| eval: true
par(mfrow = c(1,2));
cex1 = 0.9;
plot(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)", ylim=c(0,1),
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence")
)
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
---
title: "WGCNA Quantseq 171 samples (CL)"
author: "Yann Dorant"
date: "11/02/2022"
format:
pdf:
toc: true
editor: visual
execute:
enabled: false
geometry:
- top=20mm
- left=20mm
- heightrounded
highlight-style: arrow-dark
---
\
\
\
\
WGNA was ran by keeping C & L samples (N=171).
dim(input.mat)
#| label: WGCNA_analysis
#| eval: true
picked_power = 14
temp_cor <- cor
cor <- WGCNA::cor         # Force it to use WGCNA cor function
#(fix a namespace conflict issue)
netwk <- blockwiseModules(input.mat,
# == Adjacency Function ==
power = picked_power,
networkType = "signed",
# == Tree and Block Options ==
deepSplit = 3,
pamRespectsDendro = F,
# detectCutHeight = 0.75,
minModuleSize = 30,
maxBlockSize = 7000,
# == Module Adjustments ==
reassignThreshold = 0,
mergeCutHeight = 0.25,
corType = "pearson",
randomSeed = 58911,
# == TOM == Archive the run results in TOM file (saves time)
saveTOMs = T,
saveTOMFileBase = "ER",
# == Output Options
numericLabels = T,
nThreads = 6,
verbose = 3)
#| label: WGCNA-taits
#| eval: true
MEs <- netwk$MEs
colnames(MEs) <- paste0("ME_",
labels2colors(as.numeric(stringr::str_replace_all(colnames(MEs),"ME",""))))
MEs <- orderMEs(MEs)
#get correlation between MEs and pearl phenotype
traitData <- metadata |>  select(site, phenotype)
modTraitCor <- cor(MEs, traitData, use='p')
modTraitCor <- modTraitCor[sort(rownames(modTraitCor)),]
modTraitP <- corPvalueStudent(modTraitCor, nrow(metadata))
modTraitP <- modTraitP[sort(rownames(modTraitP)),]
#get Module-Membership (MM)
geneModuleMembership = as.data.frame(cor(input.mat, MEs, use='p'))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nrow(metadata)))
#get cor between genes and traitData
geneTraitCor = as.data.frame(cor(input.mat, traitData, use='p'))
geneTraitP = as.data.frame(corPvalueStudent(as.matrix(geneTraitCor), nrow(metadata)))
#| label: ynames
#| eval: true
#Prepare y-axis names for heatmap
module_df <- data.frame(
gene_id = names(netwk$colors),
colors = labels2colors(netwk$colors)
)
ynames <- data.frame(module=paste("ME",names(table(module_df$colors)),sep=''),
size =as.vector(table(module_df$colors)),
ynames=paste("(",as.vector(table(module_df$colors)),") ",
names(table(module_df$colors)),
sep = "")) %>%
arrange(., match(module,rownames(modTraitCor)))
ynames
#| label: heatmap-Modules-Traits
#| eval: true
# signif means to keep a few decimal places
textMatrix = paste(signif(modTraitCor, 2), "\n(", signif(modTraitP, 1), ")", sep = "")
dim(textMatrix) = dim(modTraitCor)
par(mar=c(4,10,2,2))
labeledHeatmap(Matrix = modTraitCor, xLabels = c('site','Pearl phenotype'),#colnames(traitData),
yLabels = ynames$ynames,
cex.lab = 1,
ySymbols = ynames$ynames, colorLabels = T,
colors = blueWhiteRed(50),
textMatrix = textMatrix, setStdMargins = FALSE,
cex.text = 1, zlim = c(-1,1),
font.lab.x = 2, font.lab.y = 2,
xLabelsAngle =0,xLabelsAdj = c(0.5,0.5),
main = paste("Module-trait relationships"))
library(circlize)
# **********************************************************************
#                    _________MAIN SCRIPT__________                 ----
# **********************************************************************
#### - I. Loading data ----
circos.clear()
circos.initialize(factors=c("pb_501_001", "pb_501_002", "pb_501_003"),
xlim=matrix(c(rep(0, 3), ref$V2), ncol=2))
# **********************************************************************
#                    _________MAIN SCRIPT__________                 ----
# **********************************************************************
#### - I. Loading data ----
setwd("/home/ntmo83/Documents")
read.csv("Genome_methyl_pos.csv",sep=',',header = T)
# **********************************************************************
#                    _________MAIN SCRIPT__________                 ----
# **********************************************************************
#### - I. Loading data ----
setwd("/home/ntmo83/Documents/Test_circos")
read.csv("Genome_methyl_pos.csv",sep=',',header = T)
read.csv("Genome_methyl_pos.csv",sep=',',header = T)
Vaestu12_012<-read.csv("Genome_methyl_pos.csv",sep=',',header = T)
circos.initialize(factors=Vaestu12_012
xlim=matrix(, ref$V2), ncol=2))
c(rep(0, 3)
)
circos.initialize(factors=Vaestu12_012
xlim=matrix(c(rep(0, 3), ref$V2), ncol=2))
circos.initialize(factors=Vaestu12_012,
xlim=matrix(c(rep(0, 3), ref$V2), ncol=2))
library(GenomicRanges)
# **********************************************************************
#                    _________MAIN SCRIPT__________                 ----
# **********************************************************************
set.seed(1); N <- 100; gr <- GRanges(seqnames = sample(c("chr1", "chr2", "chr3"), size = N, replace = TRUE), IRanges(start = sample(1:300, size = N, replace = TRUE), width = sample(70:75, size = N,replace = TRUE)), strand = sample(c("+", "-"), size = N, replace = TRUE), value = rnorm(N, 10, 3), score = rnorm(N, 100, 30), sample = sample(c("Normal", "Tumor"), size = N, replace = TRUE), pair = sample(letters, size = N, replace = TRUE))
autoplot(gr, aes(color = strand, fill = strand), facets = strand ~ seqnames)
library(ggbio)
install.packages("ggbio")
BiocManager::install("ggbio")
library(ggbio)
autoplot(gr, aes(color = strand, fill = strand), facets = strand ~ seqnames)
autoplot(gr, aes(color = strand, fill = strand), facets = strand ~ seqnames, stat = "coverage")
gr
ggplot(gr) +
layout_circle(aes(fill = seqnames), geom = "rect")
seqlengths(gr) <- c(400, 500, 700)
values(gr)$to.gr <- gr[sample(1:length(gr), size = length(gr))]
idx <- sample(1:length(gr), size = 50)
gr <- gr[idx]
ggplot() +
layout_circle(gr, geom = "ideo", fill = "gray70", radius = 7, trackWidth = 3) +
layout_circle(gr, geom = "bar", radius = 10, trackWidth = 4, aes(fill = score, y = score)) +
layout_circle(gr, geom = "point", color = "red", radius = 14, trackWidth = 3, grid = TRUE, aes(y = score)) +
layout_circle(gr, geom = "link", linked.to = "to.gr", radius = 6, trackWidth = 1)
gr
summary(Vaestu12_012)
circos.initialize(factors=c("contig_1","contig_2","contig_3","contig_4"),
xlim=matrix(c(rep(0, 4), Vaestu12_012$V2), ncol=2))
circos.initialize(factors=c("contig_1","contig_2","contig_3","contig_4"),
xlim=matrix(c(rep(0, 4), Vaestu12_012$coverage), ncol=2))
circos.initialize(factors=c("contig_1","contig_2","contig_3","contig_4"),
xlim=matrix(c(rep(0, 4), Vaestu12_012$position), ncol=2))
matrix(c(rep(0, 4), Vaestu12_012$position), ncol=2)
circos.initialize(factors=c("contig_1","contig_2","contig_3","contig_4"),
xlim=matrix(c(rep(0, 4), c(3013191,123120,17179,1121967)), ncol=2))
matrix(c(rep(0, 4), c(3013191,123120,17179,1121967)), ncol=2)
matrix(c(rep(0, 3), c(3013191,123120,17179,1121967)), ncol=2)
matrix(c(rep(0, 4), c(3013191,123120,17179,1121967)), ncol=2)
circos.initialize(factors=c("contig_1","contig_2","contig_3","contig_4"),
xlim=matrix(c(rep(0, 4), c(3013191,123120,17179,1121967)), ncol=2))
circos.par(cell.padding = c(0.02, 0, 0.02,
0))
circos.initialize(factors=c("contig_1","contig_2","contig_3","contig_4"),
xlim=matrix(c(rep(0, 4), c(3013191,123120,17179,1121967)), ncol=2))
# genomes
circos.track(ylim=c(0, 1), panel.fun=function(x, y) {
chr=CELL_META$sector.index
xlim=CELL_META$xlim
ylim=CELL_META$ylim
circos.text(mean(xlim), mean(ylim), chr)
})
circos.clear()
col_text <- "grey40"
circos.par("track.height"=0.8, gap.degree=5, cell.padding=c(0, 0, 0, 0))
circos.par("track.height"=0.8, gap.degree=5, cell.padding=c(0, 0, 0, 0))
circos.initialize(factors= c(3013191,123120,17179,1121967), xlim=matrix(c(rep(0, 4), ref$V2), ncol=2))
circos.initialize(factors= c(3013191,123120,17179,1121967), xlim=matrix(c(rep(0, 4), c(3013191,123120,17179,1121967)), ncol=2))
# genomes
circos.track(ylim=c(0, 1), panel.fun=function(x, y) {
chr=CELL_META$sector.index
xlim=CELL_META$xlim
ylim=CELL_META$ylim
circos.text(mean(xlim), mean(ylim), chr, cex=0.5, col=col_text,
facing="bending.inside", niceFacing=TRUE)
}, bg.col="grey90", bg.border=F, track.height=0.06)
# genomes x axis
circos.track(track.index = get.current.track.index(), panel.fun = function(x, y) {
circos.axis(h="top")
})
# genomes x axis
brk <- c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5)*10^6
circos.track(track.index = get.current.track.index(), panel.fun=function(x, y) {
circos.axis(h="top", major.at=brk, labels=round(brk/10^6, 1), labels.cex=0.4,
col=col_text, labels.col=col_text, lwd=0.7, labels.facing="clockwise")
}, bg.border=F)
circos.clear()
col_text <- "grey40"
circos.par("track.height"=0.8, gap.degree=5, cell.padding=c(0, 0, 0, 0))
circos.initialize(factors= c(3013191,123120,17179,1121967), xlim=matrix(c(rep(0, 4), c(3013191,123120,17179,1121967)), ncol=2))
# genomes
circos.track(ylim=c(0, 1), panel.fun=function(x, y) {
chr=CELL_META$sector.index
xlim=CELL_META$xlim
ylim=CELL_META$ylim
circos.text(mean(xlim), mean(ylim), chr, cex=0.5, col=col_text,
facing="bending.inside", niceFacing=TRUE)
}, bg.col="grey90", bg.border=F, track.height=0.06)
# genomes x axis
brk <- c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5)*10^6
circos.track(track.index = get.current.track.index(), panel.fun=function(x, y) {
circos.axis(h="top", major.at=brk, labels=round(brk/10^6, 1), labels.cex=0.4,
col=col_text, labels.col=col_text, lwd=0.7, labels.facing="clockwise")
}, bg.border=F)
# coverage
circos.genomicTrack(data=cov, panel.fun=function(region, value, ...) {
circos.genomicLines(region, value)
})
# meth content
circos.track(factors=Vaestu12_012$seqid, x=Vaestu12_012$position, y=Vaestu12_012$coverage, panel.fun=function(x, y) {
circos.lines(x, y, col="grey50", lwd=0.6)
circos.segments(x0=0, x1=max(c(3013191,123120,17179,1121967)), y0=0.3, y1=0.3, lwd=0.6, lty="11", col="grey90")
circos.segments(x0=0, x1=max(c(3013191,123120,17179,1121967)), y0=0.5, y1=0.5, lwd=0.6, lty="11", col="grey90")
circos.segments(x0=0, x1=max(c(3013191,123120,17179,1121967)), y0=0.7, y1=0.7, lwd=0.6, lty="11", col="grey90")
}, ylim=range(gc$value), track.height=0.08, bg.border=F)
# meth content
circos.track(factors=Vaestu12_012$seqid, x=Vaestu12_012$position, y=Vaestu12_012$coverage, panel.fun=function(x, y) {
circos.lines(x, y, col="grey50", lwd=0.6)
circos.segments(x0=0, x1=max(c(3013191,123120,17179,1121967)), y0=0.3, y1=0.3, lwd=0.6, lty="11", col="grey90")
circos.segments(x0=0, x1=max(c(3013191,123120,17179,1121967)), y0=0.5, y1=0.5, lwd=0.6, lty="11", col="grey90")
circos.segments(x0=0, x1=max(c(3013191,123120,17179,1121967)), y0=0.7, y1=0.7, lwd=0.6, lty="11", col="grey90")
}, ylim=Vaestu12_012$coverage, track.height=0.08, bg.border=F)
Vaestu12_012$seqid
