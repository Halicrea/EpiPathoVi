-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
#| label: plot-power
#| eval: false
par(mfrow = c(1,2));
cex1 = 0.8;
plot(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence"),cex.lab=11
)
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
#| label: plot-power
#| eval: false
par(mfrow = c(1,2));
cex1 = 0.8;
plot(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence"),cex.lab=0.8
)
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
#| label: plot-power
#| eval: false
par(mfrow = c(1,2));
cex1 = 0.8;
plot(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence"),cex.lab=0.7,cex.axis=0.7
)
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
#| label: plot-power
#| eval: false
par(mfrow = c(1,2));
cex1 = 0.8;
plot(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence"),
cex.lab=0.7,cex.axis=0.7
)
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
cex.lab=0.7,cex.axis=0.7,
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
View(Module_Membership.df)
Module_Membership.df <- geneModuleMembership #%>%
View(Module_Membership.df)
Module_Membership.df <- geneModuleMembership %>%
select(contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
mutate(., geneTraitCor = geneTraitCor$phenotype) %>%
mutate(., colors = as.character(module))
View(Module_Membership.df)
Module_Membership.df <- geneModuleMembership #%>%
View(Module_Membership.df)
module_df
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) #%>%
View(Module_Membership.df)
View(Module_Membership.df)
table(module_df$colors)
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
filter(., evm %in% module_df$colors==module)
module_df$colors==module
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') #%>%
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
filter(., evm %in% filter(module_df,colors==module)$evm)
module_df$gene_id
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
filter(., evm %in% filter(module_df,colors==module)$gene_id)
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
filter(., evm %in% filter(module_df,colors==module)$gene_id) %>%
mutate(., geneTraitCor = geneTraitCor$phenotype) %>%
mutate(., colors = as.character(module))
geneTraitCor$phenotype
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
mutate(., geneTraitCor = geneTraitCor$phenotype) %>%
#mutate(., colors = as.character(module)) %>%
filter(., evm %in% filter(module_df,colors==module)$gene_id) %>%
#head(Module_Membership.df)
cor.info <- cor.test(Module_Membership.df$ME_module,Module_Membership.df$geneTraitCor)
Module_Membership.df <- geneModuleMembership %>%
select(., contains(module)) %>%
set_colnames(., c('ME_module')) %>%
rownames_to_column(., 'evm') %>%
mutate(., geneTraitCor = geneTraitCor$phenotype) %>%
#mutate(., colors = as.character(module)) %>%
filter(., evm %in% filter(module_df,colors==module)$gene_id)
View(Module_Membership.df)
cor.info <- cor.test(Module_Membership.df$ME_module,Module_Membership.df$geneTraitCor)
cor.exp <- paste0("r=",round(cor.info$estimate,3),'; P<0.001')
# Plot
ggplot(Module_Membership.df) + aes(x=abs(ME_module), y=abs(geneTraitCor), fill=colors) +
geom_point(cex=1.2, pch=21, fill=module,alpha=0.5,stroke=0.2) +
stat_smooth(method = 'lm') +
labs(x=paste0("Module Membership in ",module," module"),
y="Gene significance for pearl quality phenotype") +
scale_x_continuous(breaks = seq(0,1,0.1)) +
scale_y_continuous(breaks =seq(0,1,0.1)) +
theme_classic() +
theme(legend.position = 'none',
axis.title = element_text(color='black', size=13),
axis.text = element_text(color='black', size=11)) +
geom_text(x=0.5,y=max(abs(Module_Membership.df$geneTraitCor)),
label= cor.exp, col='black', cex=4)
View(Module_Membership.df)
# Plot
ggplot(Module_Membership.df) + aes(x=abs(ME_module), y=abs(geneTraitCor)) +
geom_point(cex=1.2, pch=21, fill=module,alpha=0.5,stroke=0.2) +
stat_smooth(method = 'lm') +
labs(x=paste0("Module Membership in ",module," module"),
y="Gene significance for pearl quality phenotype") +
scale_x_continuous(breaks = seq(0,1,0.1)) +
scale_y_continuous(breaks =seq(0,1,0.1)) +
theme_classic() +
theme(legend.position = 'none',
axis.title = element_text(color='black', size=13),
axis.text = element_text(color='black', size=11)) +
geom_text(x=0.5,y=max(abs(Module_Membership.df$geneTraitCor)),
label= cor.exp, col='black', cex=4)
# Plot
ggplot(Module_Membership.df) + aes(x=abs(ME_module), y=abs(geneTraitCor)) +
geom_point(cex=1.6, pch=21, fill=module,alpha=0.5,stroke=0.2) +
stat_smooth(method = 'lm') +
labs(x=paste0("Module Membership in ",module," module"),
y="Gene significance for pearl quality phenotype") +
scale_x_continuous(breaks = seq(0,1,0.1)) +
scale_y_continuous(breaks =seq(0,1,0.1)) +
theme_classic() +
theme(legend.position = 'none',
axis.title = element_text(color='black', size=13),
axis.text = element_text(color='black', size=11)) +
geom_text(x=0.5,y=max(abs(Module_Membership.df$geneTraitCor)),
label= cor.exp, col='black', cex=4)
# Plot
ggplot(Module_Membership.df) + aes(x=abs(ME_module), y=abs(geneTraitCor)) +
geom_point(cex=1.6, pch=21, fill=module,alpha=0.8,stroke=0.2) +
stat_smooth(method = 'lm') +
labs(x=paste0("Module Membership in ",module," module"),
y="Gene significance for pearl quality phenotype") +
scale_x_continuous(breaks = seq(0,1,0.1)) +
scale_y_continuous(breaks =seq(0,1,0.1)) +
theme_classic() +
theme(legend.position = 'none',
axis.title = element_text(color='black', size=13),
axis.text = element_text(color='black', size=11)) +
geom_text(x=0.5,y=max(abs(Module_Membership.df$geneTraitCor)),
label= cor.exp, col='black', cex=4)
#| label: plot-power
#| eval: true
par(mfrow = c(1,2));
cex1 = 0.9;
plot(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)", ylims=c(0,1),
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence")
)
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
#| label: plot-power
#| eval: true
par(mfrow = c(1,2));
cex1 = 0.9;
plot(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)", ylim=c(0,1),
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence")
)
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red",adj = c(0,-0.5),
)
abline(h = 0.80, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
---
title: "WGCNA Quantseq 171 samples (CL)"
author: "Yann Dorant"
date: "11/02/2022"
format:
pdf:
toc: true
editor: visual
execute:
enabled: false
geometry:
- top=20mm
- left=20mm
- heightrounded
highlight-style: arrow-dark
---
\
\
\
\
WGNA was ran by keeping C & L samples (N=171).
dim(input.mat)
#| label: WGCNA_analysis
#| eval: true
picked_power = 14
temp_cor <- cor
cor <- WGCNA::cor         # Force it to use WGCNA cor function
#(fix a namespace conflict issue)
netwk <- blockwiseModules(input.mat,
# == Adjacency Function ==
power = picked_power,
networkType = "signed",
# == Tree and Block Options ==
deepSplit = 3,
pamRespectsDendro = F,
# detectCutHeight = 0.75,
minModuleSize = 30,
maxBlockSize = 7000,
# == Module Adjustments ==
reassignThreshold = 0,
mergeCutHeight = 0.25,
corType = "pearson",
randomSeed = 58911,
# == TOM == Archive the run results in TOM file (saves time)
saveTOMs = T,
saveTOMFileBase = "ER",
# == Output Options
numericLabels = T,
nThreads = 6,
verbose = 3)
#| label: WGCNA-taits
#| eval: true
MEs <- netwk$MEs
colnames(MEs) <- paste0("ME_",
labels2colors(as.numeric(stringr::str_replace_all(colnames(MEs),"ME",""))))
MEs <- orderMEs(MEs)
#get correlation between MEs and pearl phenotype
traitData <- metadata |>  select(site, phenotype)
modTraitCor <- cor(MEs, traitData, use='p')
modTraitCor <- modTraitCor[sort(rownames(modTraitCor)),]
modTraitP <- corPvalueStudent(modTraitCor, nrow(metadata))
modTraitP <- modTraitP[sort(rownames(modTraitP)),]
#get Module-Membership (MM)
geneModuleMembership = as.data.frame(cor(input.mat, MEs, use='p'))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nrow(metadata)))
#get cor between genes and traitData
geneTraitCor = as.data.frame(cor(input.mat, traitData, use='p'))
geneTraitP = as.data.frame(corPvalueStudent(as.matrix(geneTraitCor), nrow(metadata)))
#| label: ynames
#| eval: true
#Prepare y-axis names for heatmap
module_df <- data.frame(
gene_id = names(netwk$colors),
colors = labels2colors(netwk$colors)
)
ynames <- data.frame(module=paste("ME",names(table(module_df$colors)),sep=''),
size =as.vector(table(module_df$colors)),
ynames=paste("(",as.vector(table(module_df$colors)),") ",
names(table(module_df$colors)),
sep = "")) %>%
arrange(., match(module,rownames(modTraitCor)))
ynames
#| label: heatmap-Modules-Traits
#| eval: true
# signif means to keep a few decimal places
textMatrix = paste(signif(modTraitCor, 2), "\n(", signif(modTraitP, 1), ")", sep = "")
dim(textMatrix) = dim(modTraitCor)
par(mar=c(4,10,2,2))
labeledHeatmap(Matrix = modTraitCor, xLabels = c('site','Pearl phenotype'),#colnames(traitData),
yLabels = ynames$ynames,
cex.lab = 1,
ySymbols = ynames$ynames, colorLabels = T,
colors = blueWhiteRed(50),
textMatrix = textMatrix, setStdMargins = FALSE,
cex.text = 1, zlim = c(-1,1),
font.lab.x = 2, font.lab.y = 2,
xLabelsAngle =0,xLabelsAdj = c(0.5,0.5),
main = paste("Module-trait relationships"))
# **********************************************************************
#                           Load libraries                          ----
# **********************************************************************
list.of.packages <- c(
"ggplot2",
"foreach",
"doParallel",
"ranger",
"tidyverse",
"kableExtra",
"stringr"
)
# Load the packages
for(package.i in list.of.packages){
suppressPackageStartupMessages(library(
package.i,
character.only = T
))
}
n.cores <- parallel::detectCores() - 1
# Create the cluster
my.cluster <- parallel::makeCluster(n.cores, type ="PSOCK")
# And register them to be used by %dopar%
doParallel::registerDoParallel(cl = my.cluster)
# Check if registered
foreach::getDoParRegistered()
# **********************************************************************
#                    _________MAIN SCRIPT__________                 ----
# **********************************************************************
#### - I. Loading data ----
setwd("/home/ntmo83/Dropbox/M2 Ifremer Elyna Bouchereau/bioinfo_epivib_gitlab_m2-elynab/Differences_epi_12-016_02-041_07-115")
df_PACBIO <- read.csv(file = "Methylation_Vaestu_alt.csv", header = T)
df_12_016 <- df_PACBIO[!is.na(df_PACBIO$Score_016),1:11]
df_07_115 <- df_PACBIO[!is.na(df_PACBIO$Score_115),c(1:7,12:15)]
df_02_041 <- df_PACBIO[!is.na(df_PACBIO$Score_041),c(1:7,16:19)]
#### - 1.1. Separate in multiple DATA-FRAME the motifs for a strain
head(df_12_016)
motif_GATC_12_016          <- df_12_016[df_12_016$motif == "GATC" | df_12_016$motif == "GATC (GARANNNNNNCTG,GATC)", 1:3]
motif_CAGNNNNNNTYTC_12_016 <- df_12_016[df_12_016$motif == "CAGNNNNNNTYTC", 1:3]
motif_GARANNNNNNCTG_12_016 <- df_12_016[df_12_016$motif == "GARANNNNNNCTG" | df_12_016$motif == "GARANNNNNNCTG (ACCNNNNNNNTTCY,GARANNNNNNCTG)", 1:3]
motif_GGWCC_12_016         <- df_12_016[df_12_016$motif == "GGWCC", 1:3]
motif_GTAYNNNNGTTA_12_016  <- df_12_016[df_12_016$motif == "GTAYNNNNGTTA", 1:3]
motif_TAACNNNNRTAC_12_016  <- df_12_016[df_12_016$motif == "TAACNNNNRTAC", 1:3]
motif_RGAANNNNNNNGGT_12_016<- df_12_016[df_12_016$motif == "RGAANNNNNNNGGT", 1:3]
motif_ACCNNNNNNNTTCY_12_016<- df_12_016[df_12_016$motif == "ACCNNNNNNNTTCY" | df_12_016$motif == "ACCNNNNNNNTTCY,RGAANNNNNNNGGT", 1:3]
## We calculate and add the end position of the motif
motif_GATC_12_016["end_pos"] <- motif_GATC_12_016["position"]+4
motif_CAGNNNNNNTYTC_12_016["end_pos"] <- motif_CAGNNNNNNTYTC_12_016["position"]+13
motif_GARANNNNNNCTG_12_016["end_pos"] <- motif_GARANNNNNNCTG_12_016["position"]+13
motif_GGWCC_12_016["end_pos"] <- motif_GGWCC_12_016["position"]+5
motif_GTAYNNNNGTTA_12_016["end_pos"] <- motif_GTAYNNNNGTTA_12_016["position"]+12
motif_GATC_12_016["end_pos"] <- motif_GATC_12_016["position"]+12
motif_GATC_12_016["end_pos"] <- motif_GATC_12_016["position"]+14
motif_GATC_12_016["end_pos"] <- motif_GATC_12_016["position"]+14
#### - 1.2. Creating a function to automatise the processus of exporting the coordinates data for each motifs
export_motifs <- function(df, strain_name){
head(df)
motif_GATC          <- df[df$motif == "GATC" | df$motif == "GATC (GARANNNNNNCTG,GATC)", 1:3]
motif_CAGNNNNNNTYTC <- df[df$motif == "CAGNNNNNNTYTC", 1:3]
motif_GARANNNNNNCTG <- df[df$motif == "GARANNNNNNCTG" | df$motif == "GARANNNNNNCTG (ACCNNNNNNNTTCY,GARANNNNNNCTG)", 1:3]
motif_GGWCC         <- df[df$motif == "GGWCC", 1:3]
motif_GTAYNNNNGTTA  <- df[df$motif == "GTAYNNNNGTTA", 1:3]
motif_TAACNNNNRTAC  <- df[df$motif == "TAACNNNNRTAC", 1:3]
motif_RGAANNNNNNNGGT<- df[df$motif == "RGAANNNNNNNGGT", 1:3]
motif_ACCNNNNNNNTTCY<- df[df$motif == "ACCNNNNNNNTTCY" | df$motif == "ACCNNNNNNNTTCY,RGAANNNNNNNGGT", 1:3]
## We calculate and add the end position of the motif
motif_GATC["end_pos"] <- motif_GATC["position"]+4
motif_CAGNNNNNNTYTC["end_pos"] <- motif_CAGNNNNNNTYTC["position"]+13
motif_GARANNNNNNCTG["end_pos"] <- motif_GARANNNNNNCTG["position"]+13
motif_GGWCC["end_pos"] <- motif_GGWCC["position"]+5
motif_GTAYNNNNGTTA["end_pos"] <- motif_GTAYNNNNGTTA["position"]+12
motif_TAACNNNNRTAC["end_pos"] <- motif_TAACNNNNRTAC["position"]+12
motif_RGAANNNNNNNGGT["end_pos"] <- motif_RGAANNNNNNNGGT["position"]+14
motif_ACCNNNNNNNTTCY["end_pos"] <- motif_ACCNNNNNNNTTCY["position"]+14
## We can then exports those DATAFRAMES
write.table(motif_GATC,paste("./MOTIFS/","motif_GATC_",strain_name,".txt",sep = ""),
quote = F, row.names = F, sep = " ", col.names=FALSE)
write.table(motif_CAGNNNNNNTYTC,paste("./MOTIFS/","motif_CAGNNNNNNTYTC_",strain_name,".txt",sep = ""),
quote = F, row.names = F, sep = " ", col.names=FALSE)
write.table(motif_GARANNNNNNCTG,paste("./MOTIFS/","motif_GARANNNNNNCTG_",strain_name,".txt",sep = ""),
quote = F, row.names = F, sep = " ", col.names=FALSE)
write.table(motif_GGWCC,paste("./MOTIFS/","motif_GGWCC_",strain_name,".txt",sep = ""),
quote = F, row.names = F, sep = " ",  col.names=FALSE)
write.table(motif_GTAYNNNNGTTA,paste("./MOTIFS/","motif_GTAYNNNNGTTA_",strain_name,".txt",sep = ""),
quote = F, row.names = F, sep = " ",  col.names=FALSE)
write.table(motif_TAACNNNNRTAC,paste("./MOTIFS/","motif_TAACNNNNRTAC_",strain_name,".txt",sep = ""),
quote = F, row.names = F, sep = " ", col.names=FALSE)
write.table(motif_RGAANNNNNNNGGT,paste("./MOTIFS/","motif_RGAANNNNNNNGGT_",strain_name,".txt",sep = ""),
quote = F, row.names = F, sep = " ", col.names=FALSE)
write.table(motif_ACCNNNNNNNTTCY,paste("./MOTIFS/","motif_ACCNNNNNNNTTCY_",strain_name,".txt",sep = ""),
quote = F, row.names = F, sep = " ",  col.names=FALSE)
print("DONE")
}
finding_motifs <- function(genome.path, motif)
{}
motif_CAGNNNNNNTYTC_12_016
finding_motifs <- function(genome.path, motif){
nb.motifs <- dim(motif)[1]
df.motifs <- data.frame(motif = rep("",nb.motifs),
context = rep("",nb.motifs),
pos_start = rep(0,nb.motifs),
pos_end = rep(0,nb.motifs),
contig = rep(2,nb.motifs))
for(i.motif in 1:nb.motifs){
motif.pos.tmp = system(paste("../0_bin/Finding_context_of_motif",
genome.path,
motif$context[i.motif],sep=" "),intern = T)
motif.pos_contig = strsplit(motif.pos.tmp, " ")
#print( strsplit(motif.pos.tmp, " "))
if(length(motif.pos.tmp) != 0){
df.motifs$pos_start[i.motif] = motif.pos_contig[[1]][1]
df.motifs$contig[i.motif] = motif.pos_contig[[1]][2]
}
}
return(df.motifs)
}
finding_motifs("../Vaestuarianus_GENOME/Vaestlr12016-contigs.fasta",
motif_CAGNNNNNNTYTC_12_016)
